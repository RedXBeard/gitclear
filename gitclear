#!/bin/bash -
#title			:git_clear
#author		 	:Barbaros Yıldırım (barbarosaliyildirim@gmail.com)
#date			:20140902
#version		:0.0.2
#usage			:copy this script into /usr/local/bin folder and
#				 give required rights as executability
#==============================================================================


plc="$1"
act="$2"
#old="$2"
PLACES="-local -remote"
ACTIONS="-D -E"


count=0
plc_flag=""
for i in $PLACES; do
    count=$(($count+1))
    if [ $i == $plc ]; then
        if [ $count -eq 1 ]; then
            plc_flag="local"
        elif [ $count -eq 2 ]; then
            plc_flag="remote"
        fi
    fi
done

if [ "$plc_flag" = "" ]; then
    echo "Error occured..
    '-local' for local branches
    '-remote' for remote branches"
    exit
fi

#re='^[0-9]+$'
#if [ "$plc_flag" = "remote" ] && ! [[ $old =~ $re ]]; then
#	echo "Error occured..
#	usage: 'git_clean -local 30 -D blah_branch' "
#	exit
#fi

#if [ "$plc_flag" = "local" ]; then
#	act="$2"
#else
#	act="$3"
#fi

flag=""
count=0
for i in $ACTIONS; do
    count=$(($count+1))
    if [ $i == $act ]; then
        if [ $count -eq 1 ]; then
            flag="direct"
        elif [ $count -eq 2 ]; then
            flag="except"
        fi
    fi
done

if [ "$flag" = "" ]; then
    echo "Error occured..
    '-D' for 'direct'
    '-E' for 'except'"
    exit
fi

shift && shift
#if [[ $old =~ $re ]] && [ "$plc_flag" = "remote"]; then
#	shift
#fi

## To take all wanted branch list which could be
## wanted ones to delete or wanted ones to keep
branches=$@
## sys call as git branch will also returned actual files and dictionaries
## to be sure exact branch names, double check has to be performed.
ALL=$(git branch)
LS=$(ls)

## By default master branch taken as movement point
## and also keep in mind not do delete by mistake
git checkout master

for a in $ALL; do
    br_flag=0
    ## As mentioned required filter operation is performing.
    for b in $LS; do
        if [ $a == $b ]; then
            br_flag=1
        fi
    done

    ## When clarity of the poped up name is an actual branch name
    ## Then the second check is as this named branch is
    ## signed for deletion or keeping
    if [ $br_flag -eq 0 ]; then
        de_flag=0
        if [ "$flag" = "direct" ] && [ "$(echo $branches | grep $a)" != "" ]; then
            de_flag=1
        elif [ "$flag" = "except" ] && [ "$(echo $branches | grep $a)" = "" ]; then
            de_flag=1
        fi

        ## if named branch can be deleted then keep it in a list.
        if [ $de_flag -eq 1 ]; then
            BRANCHES="$BRANCHES $a"
        fi
    fi
done

## After all processes is done, collected branches ready to delete.
for b in $BRANCHES; do
    if [ "$b" != "master" ] && [ "$plc_flag" = "local" ]; then
        git branch -D $b
    elif [ "$b" != "master" ] && [ "$plc_flag" = "remote" ]; then
        # TODO: implementation.
        echo $b
    fi
done
